// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.6.0
// source: proto/kcli.proto

package kcli

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{0}
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	GitVersion string `protobuf:"bytes,2,opt,name=git_version,json=gitVersion,proto3" json:"git_version,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{1}
}

func (x *Version) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Version) GetGitVersion() string {
	if x != nil {
		return x.GitVersion
	}
	return ""
}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client          string `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Type            string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Current         bool   `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	Name            string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	AccessKeyId     string `protobuf:"bytes,5,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	AccessKeySecret string `protobuf:"bytes,6,opt,name=access_key_secret,json=accessKeySecret,proto3" json:"access_key_secret,omitempty"`
	Region          string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	Keypair         string `protobuf:"bytes,8,opt,name=keypair,proto3" json:"keypair,omitempty"`
	Host            string `protobuf:"bytes,9,opt,name=host,proto3" json:"host,omitempty"`
	Port            string `protobuf:"bytes,10,opt,name=port,proto3" json:"port,omitempty"`
	User            string `protobuf:"bytes,11,opt,name=user,proto3" json:"user,omitempty"`
	Protocol        string `protobuf:"bytes,12,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Url             string `protobuf:"bytes,13,opt,name=url,proto3" json:"url,omitempty"`
	Pool            string `protobuf:"bytes,14,opt,name=pool,proto3" json:"pool,omitempty"`
	Datacenter      string `protobuf:"bytes,15,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	CaFile          string `protobuf:"bytes,16,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty"`
	Cluster         string `protobuf:"bytes,17,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Org             string `protobuf:"bytes,18,opt,name=org,proto3" json:"org,omitempty"`
	Password        string `protobuf:"bytes,19,opt,name=password,proto3" json:"password,omitempty"`
	Credentials     string `protobuf:"bytes,20,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Project         string `protobuf:"bytes,21,opt,name=project,proto3" json:"project,omitempty"`
	Zone            string `protobuf:"bytes,22,opt,name=zone,proto3" json:"zone,omitempty"`
	Domain          string `protobuf:"bytes,23,opt,name=domain,proto3" json:"domain,omitempty"`
	AuthUrl         string `protobuf:"bytes,24,opt,name=auth_url,json=authUrl,proto3" json:"auth_url,omitempty"`
	Token           string `protobuf:"bytes,25,opt,name=token,proto3" json:"token,omitempty"`
	Multus          bool   `protobuf:"varint,26,opt,name=multus,proto3" json:"multus,omitempty"`
	Cdi             bool   `protobuf:"varint,27,opt,name=cdi,proto3" json:"cdi,omitempty"`
	Enabled         bool   `protobuf:"varint,28,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{2}
}

func (x *Client) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *Client) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Client) GetCurrent() bool {
	if x != nil {
		return x.Current
	}
	return false
}

func (x *Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *Client) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *Client) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Client) GetKeypair() string {
	if x != nil {
		return x.Keypair
	}
	return ""
}

func (x *Client) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Client) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Client) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Client) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Client) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Client) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *Client) GetDatacenter() string {
	if x != nil {
		return x.Datacenter
	}
	return ""
}

func (x *Client) GetCaFile() string {
	if x != nil {
		return x.CaFile
	}
	return ""
}

func (x *Client) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *Client) GetOrg() string {
	if x != nil {
		return x.Org
	}
	return ""
}

func (x *Client) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Client) GetCredentials() string {
	if x != nil {
		return x.Credentials
	}
	return ""
}

func (x *Client) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Client) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Client) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Client) GetAuthUrl() string {
	if x != nil {
		return x.AuthUrl
	}
	return ""
}

func (x *Client) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Client) GetMultus() bool {
	if x != nil {
		return x.Multus
	}
	return false
}

func (x *Client) GetCdi() bool {
	if x != nil {
		return x.Cdi
	}
	return false
}

func (x *Client) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Clientslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clients []*Client `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients,omitempty"`
}

func (x *Clientslist) Reset() {
	*x = Clientslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clientslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clientslist) ProtoMessage() {}

func (x *Clientslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clientslist.ProtoReflect.Descriptor instead.
func (*Clientslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{3}
}

func (x *Clientslist) GetClients() []*Client {
	if x != nil {
		return x.Clients
	}
	return nil
}

type Vm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Debug     bool   `protobuf:"varint,2,opt,name=debug,proto3" json:"debug,omitempty"`
	Snapshots bool   `protobuf:"varint,3,opt,name=snapshots,proto3" json:"snapshots,omitempty"`
	User      string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	L         string `protobuf:"bytes,5,opt,name=l,proto3" json:"l,omitempty"`
	R         string `protobuf:"bytes,6,opt,name=r,proto3" json:"r,omitempty"`
	X         bool   `protobuf:"varint,7,opt,name=X,proto3" json:"X,omitempty"`
	Y         bool   `protobuf:"varint,8,opt,name=Y,proto3" json:"Y,omitempty"`
	D         string `protobuf:"bytes,9,opt,name=D,proto3" json:"D,omitempty"`
	Cmd       string `protobuf:"bytes,10,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (x *Vm) Reset() {
	*x = Vm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vm) ProtoMessage() {}

func (x *Vm) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vm.ProtoReflect.Descriptor instead.
func (*Vm) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{4}
}

func (x *Vm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vm) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Vm) GetSnapshots() bool {
	if x != nil {
		return x.Snapshots
	}
	return false
}

func (x *Vm) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Vm) GetL() string {
	if x != nil {
		return x.L
	}
	return ""
}

func (x *Vm) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *Vm) GetX() bool {
	if x != nil {
		return x.X
	}
	return false
}

func (x *Vm) GetY() bool {
	if x != nil {
		return x.Y
	}
	return false
}

func (x *Vm) GetD() string {
	if x != nil {
		return x.D
	}
	return ""
}

func (x *Vm) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

type Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot string `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	Current  bool   `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{5}
}

func (x *Snapshot) GetSnapshot() string {
	if x != nil {
		return x.Snapshot
	}
	return ""
}

func (x *Snapshot) GetCurrent() bool {
	if x != nil {
		return x.Current
	}
	return false
}

type Netinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Mac    string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Net    string `protobuf:"bytes,3,opt,name=net,proto3" json:"net,omitempty"`
	Type   string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Netinfo) Reset() {
	*x = Netinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Netinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Netinfo) ProtoMessage() {}

func (x *Netinfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Netinfo.ProtoReflect.Descriptor instead.
func (*Netinfo) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{6}
}

func (x *Netinfo) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Netinfo) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Netinfo) GetNet() string {
	if x != nil {
		return x.Net
	}
	return ""
}

func (x *Netinfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Diskinfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device string `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Path   string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Size   int32  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	Type   string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Diskinfo) Reset() {
	*x = Diskinfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diskinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diskinfo) ProtoMessage() {}

func (x *Diskinfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diskinfo.ProtoReflect.Descriptor instead.
func (*Diskinfo) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{7}
}

func (x *Diskinfo) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *Diskinfo) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Diskinfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Diskinfo) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Diskinfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Vminfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image        string      `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Cpus         int32       `protobuf:"varint,3,opt,name=cpus,proto3" json:"cpus,omitempty"`
	Memory       int32       `protobuf:"varint,4,opt,name=memory,proto3" json:"memory,omitempty"`
	Plan         string      `protobuf:"bytes,5,opt,name=plan,proto3" json:"plan,omitempty"`
	Profile      string      `protobuf:"bytes,6,opt,name=profile,proto3" json:"profile,omitempty"`
	Status       string      `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	Ip           string      `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	Nets         []*Netinfo  `protobuf:"bytes,9,rep,name=nets,proto3" json:"nets,omitempty"`
	Disks        []*Diskinfo `protobuf:"bytes,10,rep,name=disks,proto3" json:"disks,omitempty"`
	Creationdate string      `protobuf:"bytes,11,opt,name=creationdate,proto3" json:"creationdate,omitempty"`
	User         string      `protobuf:"bytes,12,opt,name=user,proto3" json:"user,omitempty"`
	Autostart    bool        `protobuf:"varint,13,opt,name=autostart,proto3" json:"autostart,omitempty"`
	Debug        string      `protobuf:"bytes,14,opt,name=debug,proto3" json:"debug,omitempty"`
	Snapshots    []*Snapshot `protobuf:"bytes,15,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	Kube         string      `protobuf:"bytes,16,opt,name=kube,proto3" json:"kube,omitempty"`
	Kubetype     string      `protobuf:"bytes,17,opt,name=kubetype,proto3" json:"kubetype,omitempty"`
	Instanceid   string      `protobuf:"bytes,18,opt,name=instanceid,proto3" json:"instanceid,omitempty"`
	Host         string      `protobuf:"bytes,19,opt,name=host,proto3" json:"host,omitempty"`
	Privateip    string      `protobuf:"bytes,20,opt,name=privateip,proto3" json:"privateip,omitempty"`
	Az           string      `protobuf:"bytes,21,opt,name=az,proto3" json:"az,omitempty"`
	Flavor       string      `protobuf:"bytes,22,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Tags         string      `protobuf:"bytes,23,opt,name=tags,proto3" json:"tags,omitempty"`
	Nodeport     string      `protobuf:"bytes,24,opt,name=nodeport,proto3" json:"nodeport,omitempty"`
	Namespace    string      `protobuf:"bytes,25,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Loadbalancer string      `protobuf:"bytes,26,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	Error        string      `protobuf:"bytes,27,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Vminfo) Reset() {
	*x = Vminfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vminfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vminfo) ProtoMessage() {}

func (x *Vminfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vminfo.ProtoReflect.Descriptor instead.
func (*Vminfo) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{8}
}

func (x *Vminfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vminfo) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Vminfo) GetCpus() int32 {
	if x != nil {
		return x.Cpus
	}
	return 0
}

func (x *Vminfo) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Vminfo) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *Vminfo) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *Vminfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Vminfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Vminfo) GetNets() []*Netinfo {
	if x != nil {
		return x.Nets
	}
	return nil
}

func (x *Vminfo) GetDisks() []*Diskinfo {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *Vminfo) GetCreationdate() string {
	if x != nil {
		return x.Creationdate
	}
	return ""
}

func (x *Vminfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Vminfo) GetAutostart() bool {
	if x != nil {
		return x.Autostart
	}
	return false
}

func (x *Vminfo) GetDebug() string {
	if x != nil {
		return x.Debug
	}
	return ""
}

func (x *Vminfo) GetSnapshots() []*Snapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *Vminfo) GetKube() string {
	if x != nil {
		return x.Kube
	}
	return ""
}

func (x *Vminfo) GetKubetype() string {
	if x != nil {
		return x.Kubetype
	}
	return ""
}

func (x *Vminfo) GetInstanceid() string {
	if x != nil {
		return x.Instanceid
	}
	return ""
}

func (x *Vminfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Vminfo) GetPrivateip() string {
	if x != nil {
		return x.Privateip
	}
	return ""
}

func (x *Vminfo) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *Vminfo) GetFlavor() string {
	if x != nil {
		return x.Flavor
	}
	return ""
}

func (x *Vminfo) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Vminfo) GetNodeport() string {
	if x != nil {
		return x.Nodeport
	}
	return ""
}

func (x *Vminfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Vminfo) GetLoadbalancer() string {
	if x != nil {
		return x.Loadbalancer
	}
	return ""
}

func (x *Vminfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Vmlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vms []*Vminfo `protobuf:"bytes,1,rep,name=vms,proto3" json:"vms,omitempty"`
}

func (x *Vmlist) Reset() {
	*x = Vmlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vmlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vmlist) ProtoMessage() {}

func (x *Vmlist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vmlist.ProtoReflect.Descriptor instead.
func (*Vmlist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{9}
}

func (x *Vmlist) GetVms() []*Vminfo {
	if x != nil {
		return x.Vms
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Reason    string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Deletedvm []string `protobuf:"bytes,3,rep,name=deletedvm,proto3" json:"deletedvm,omitempty"`
	Vm        string   `protobuf:"bytes,4,opt,name=vm,proto3" json:"vm,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{10}
}

func (x *Result) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Result) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Result) GetDeletedvm() []string {
	if x != nil {
		return x.Deletedvm
	}
	return nil
}

func (x *Result) GetVm() string {
	if x != nil {
		return x.Vm
	}
	return ""
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Flavor      string `protobuf:"bytes,2,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Pool        string `protobuf:"bytes,3,opt,name=pool,proto3" json:"pool,omitempty"`
	Disks       string `protobuf:"bytes,4,opt,name=disks,proto3" json:"disks,omitempty"`
	Image       string `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Nets        string `protobuf:"bytes,6,opt,name=nets,proto3" json:"nets,omitempty"`
	Cloudinit   bool   `protobuf:"varint,7,opt,name=cloudinit,proto3" json:"cloudinit,omitempty"`
	Nested      bool   `protobuf:"varint,8,opt,name=nested,proto3" json:"nested,omitempty"`
	Reservedns  bool   `protobuf:"varint,9,opt,name=reservedns,proto3" json:"reservedns,omitempty"`
	Reservehost bool   `protobuf:"varint,10,opt,name=reservehost,proto3" json:"reservehost,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{11}
}

func (x *Profile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Profile) GetFlavor() string {
	if x != nil {
		return x.Flavor
	}
	return ""
}

func (x *Profile) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *Profile) GetDisks() string {
	if x != nil {
		return x.Disks
	}
	return ""
}

func (x *Profile) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Profile) GetNets() string {
	if x != nil {
		return x.Nets
	}
	return ""
}

func (x *Profile) GetCloudinit() bool {
	if x != nil {
		return x.Cloudinit
	}
	return false
}

func (x *Profile) GetNested() bool {
	if x != nil {
		return x.Nested
	}
	return false
}

func (x *Profile) GetReservedns() bool {
	if x != nil {
		return x.Reservedns
	}
	return false
}

func (x *Profile) GetReservehost() bool {
	if x != nil {
		return x.Reservehost
	}
	return false
}

type Profileslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profiles []*Profile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (x *Profileslist) Reset() {
	*x = Profileslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profileslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profileslist) ProtoMessage() {}

func (x *Profileslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profileslist.ProtoReflect.Descriptor instead.
func (*Profileslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{12}
}

func (x *Profileslist) GetProfiles() []*Profile {
	if x != nil {
		return x.Profiles
	}
	return nil
}

type Isoslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isos []string `protobuf:"bytes,1,rep,name=isos,proto3" json:"isos,omitempty"`
}

func (x *Isoslist) Reset() {
	*x = Isoslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Isoslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Isoslist) ProtoMessage() {}

func (x *Isoslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Isoslist.ProtoReflect.Descriptor instead.
func (*Isoslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{13}
}

func (x *Isoslist) GetIsos() []string {
	if x != nil {
		return x.Isos
	}
	return nil
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{14}
}

func (x *Image) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type Imageslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []string `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *Imageslist) Reset() {
	*x = Imageslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Imageslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Imageslist) ProtoMessage() {}

func (x *Imageslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Imageslist.ProtoReflect.Descriptor instead.
func (*Imageslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{15}
}

func (x *Imageslist) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

type Disk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disk string `protobuf:"bytes,1,opt,name=disk,proto3" json:"disk,omitempty"`
	Pool string `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Disk) Reset() {
	*x = Disk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{16}
}

func (x *Disk) GetDisk() string {
	if x != nil {
		return x.Disk
	}
	return ""
}

func (x *Disk) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *Disk) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Diskslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disks []*Disk `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"`
}

func (x *Diskslist) Reset() {
	*x = Diskslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diskslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diskslist) ProtoMessage() {}

func (x *Diskslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diskslist.ProtoReflect.Descriptor instead.
func (*Diskslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{17}
}

func (x *Diskslist) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan string `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	Vms  string `protobuf:"bytes,2,opt,name=vms,proto3" json:"vms,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{18}
}

func (x *Plan) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *Plan) GetVms() string {
	if x != nil {
		return x.Vms
	}
	return ""
}

type Planslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plans []*Plan `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty"`
}

func (x *Planslist) Reset() {
	*x = Planslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Planslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Planslist) ProtoMessage() {}

func (x *Planslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Planslist.ProtoReflect.Descriptor instead.
func (*Planslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{19}
}

func (x *Planslist) GetPlans() []*Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

type Keyword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword string `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Value   string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Keyword) Reset() {
	*x = Keyword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keyword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyword) ProtoMessage() {}

func (x *Keyword) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyword.ProtoReflect.Descriptor instead.
func (*Keyword) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{20}
}

func (x *Keyword) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *Keyword) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Keywordslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keywords []*Keyword `protobuf:"bytes,1,rep,name=keywords,proto3" json:"keywords,omitempty"`
}

func (x *Keywordslist) Reset() {
	*x = Keywordslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keywordslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keywordslist) ProtoMessage() {}

func (x *Keywordslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keywordslist.ProtoReflect.Descriptor instead.
func (*Keywordslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{21}
}

func (x *Keywordslist) GetKeywords() []*Keyword {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pool string `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Full bool   `protobuf:"varint,3,opt,name=full,proto3" json:"full,omitempty"`
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{22}
}

func (x *Pool) GetPool() string {
	if x != nil {
		return x.Pool
	}
	return ""
}

func (x *Pool) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Pool) GetFull() bool {
	if x != nil {
		return x.Full
	}
	return false
}

type Poolslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*Pool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *Poolslist) Reset() {
	*x = Poolslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poolslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poolslist) ProtoMessage() {}

func (x *Poolslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poolslist.ProtoReflect.Descriptor instead.
func (*Poolslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{23}
}

func (x *Poolslist) GetPools() []*Pool {
	if x != nil {
		return x.Pools
	}
	return nil
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Cidr    string `protobuf:"bytes,3,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Dhcp    string `protobuf:"bytes,4,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
	Domain  string `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
	Mode    string `protobuf:"bytes,6,opt,name=mode,proto3" json:"mode,omitempty"`
	Plan    string `protobuf:"bytes,7,opt,name=plan,proto3" json:"plan,omitempty"`
	Ip      string `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{24}
}

func (x *Network) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Network) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Network) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *Network) GetDhcp() string {
	if x != nil {
		return x.Dhcp
	}
	return ""
}

func (x *Network) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Network) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Network) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *Network) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type Networkslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Networks []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *Networkslist) Reset() {
	*x = Networkslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Networkslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Networkslist) ProtoMessage() {}

func (x *Networkslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Networkslist.ProtoReflect.Descriptor instead.
func (*Networkslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{25}
}

func (x *Networkslist) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet  string `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Az      string `protobuf:"bytes,2,opt,name=az,proto3" json:"az,omitempty"`
	Cidr    string `protobuf:"bytes,3,opt,name=cidr,proto3" json:"cidr,omitempty"`
	Network string `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{26}
}

func (x *Subnet) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *Subnet) GetAz() string {
	if x != nil {
		return x.Az
	}
	return ""
}

func (x *Subnet) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *Subnet) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type Subnetslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnets []*Subnet `protobuf:"bytes,1,rep,name=subnets,proto3" json:"subnets,omitempty"`
}

func (x *Subnetslist) Reset() {
	*x = Subnetslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnetslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnetslist) ProtoMessage() {}

func (x *Subnetslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnetslist.ProtoReflect.Descriptor instead.
func (*Subnetslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{27}
}

func (x *Subnetslist) GetSubnets() []*Subnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

type Kube struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kube string `protobuf:"bytes,1,opt,name=kube,proto3" json:"kube,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Vms  string `protobuf:"bytes,3,opt,name=vms,proto3" json:"vms,omitempty"`
}

func (x *Kube) Reset() {
	*x = Kube{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kube) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kube) ProtoMessage() {}

func (x *Kube) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kube.ProtoReflect.Descriptor instead.
func (*Kube) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{28}
}

func (x *Kube) GetKube() string {
	if x != nil {
		return x.Kube
	}
	return ""
}

func (x *Kube) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Kube) GetVms() string {
	if x != nil {
		return x.Vms
	}
	return ""
}

type Kubeslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kubes []*Kube `protobuf:"bytes,1,rep,name=kubes,proto3" json:"kubes,omitempty"`
}

func (x *Kubeslist) Reset() {
	*x = Kubeslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kubeslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kubeslist) ProtoMessage() {}

func (x *Kubeslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kubeslist.ProtoReflect.Descriptor instead.
func (*Kubeslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{29}
}

func (x *Kubeslist) GetKubes() []*Kube {
	if x != nil {
		return x.Kubes
	}
	return nil
}

type Lb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lb       string `protobuf:"bytes,1,opt,name=lb,proto3" json:"lb,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Ports    string `protobuf:"bytes,4,opt,name=ports,proto3" json:"ports,omitempty"`
	Target   string `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *Lb) Reset() {
	*x = Lb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lb) ProtoMessage() {}

func (x *Lb) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lb.ProtoReflect.Descriptor instead.
func (*Lb) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{30}
}

func (x *Lb) GetLb() string {
	if x != nil {
		return x.Lb
	}
	return ""
}

func (x *Lb) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Lb) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Lb) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *Lb) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

type Lbslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lbs []*Lb `protobuf:"bytes,1,rep,name=lbs,proto3" json:"lbs,omitempty"`
}

func (x *Lbslist) Reset() {
	*x = Lbslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lbslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lbslist) ProtoMessage() {}

func (x *Lbslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lbslist.ProtoReflect.Descriptor instead.
func (*Lbslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{31}
}

func (x *Lbslist) GetLbs() []*Lb {
	if x != nil {
		return x.Lbs
	}
	return nil
}

type Flavor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flavor  string `protobuf:"bytes,1,opt,name=flavor,proto3" json:"flavor,omitempty"`
	Numcpus int32  `protobuf:"varint,2,opt,name=numcpus,proto3" json:"numcpus,omitempty"`
	Memory  int32  `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *Flavor) Reset() {
	*x = Flavor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flavor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flavor) ProtoMessage() {}

func (x *Flavor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flavor.ProtoReflect.Descriptor instead.
func (*Flavor) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{32}
}

func (x *Flavor) GetFlavor() string {
	if x != nil {
		return x.Flavor
	}
	return ""
}

func (x *Flavor) GetNumcpus() int32 {
	if x != nil {
		return x.Numcpus
	}
	return 0
}

func (x *Flavor) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

type Flavorslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flavors []*Flavor `protobuf:"bytes,1,rep,name=flavors,proto3" json:"flavors,omitempty"`
}

func (x *Flavorslist) Reset() {
	*x = Flavorslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flavorslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flavorslist) ProtoMessage() {}

func (x *Flavorslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flavorslist.ProtoReflect.Descriptor instead.
func (*Flavorslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{33}
}

func (x *Flavorslist) GetFlavors() []*Flavor {
	if x != nil {
		return x.Flavors
	}
	return nil
}

type Repo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Repo) Reset() {
	*x = Repo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repo) ProtoMessage() {}

func (x *Repo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repo.ProtoReflect.Descriptor instead.
func (*Repo) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{34}
}

func (x *Repo) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *Repo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Reposlist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repos []*Repo `protobuf:"bytes,1,rep,name=repos,proto3" json:"repos,omitempty"`
}

func (x *Reposlist) Reset() {
	*x = Reposlist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reposlist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reposlist) ProtoMessage() {}

func (x *Reposlist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reposlist.ProtoReflect.Descriptor instead.
func (*Reposlist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{35}
}

func (x *Reposlist) GetRepos() []*Repo {
	if x != nil {
		return x.Repos
	}
	return nil
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Product     string `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	Repo        string `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	Group       string `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Numvms      string `protobuf:"bytes,5,opt,name=numvms,proto3" json:"numvms,omitempty"`
	Memory      string `protobuf:"bytes,6,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{36}
}

func (x *Product) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *Product) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *Product) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetNumvms() string {
	if x != nil {
		return x.Numvms
	}
	return ""
}

func (x *Product) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

type Productslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Products []*Product `protobuf:"bytes,1,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *Productslist) Reset() {
	*x = Productslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Productslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Productslist) ProtoMessage() {}

func (x *Productslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Productslist.ProtoReflect.Descriptor instead.
func (*Productslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{37}
}

func (x *Productslist) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Client       string   `protobuf:"bytes,1,opt,name=client,proto3" json:"client,omitempty"`
	Extraclients []string `protobuf:"bytes,2,rep,name=extraclients,proto3" json:"extraclients,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{38}
}

func (x *Config) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

func (x *Config) GetExtraclients() []string {
	if x != nil {
		return x.Extraclients
	}
	return nil
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Container string `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Status    string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Image     string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Plan      string `protobuf:"bytes,4,opt,name=plan,proto3" json:"plan,omitempty"`
	Command   string `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty"`
	Ports     string `protobuf:"bytes,6,opt,name=ports,proto3" json:"ports,omitempty"`
	Deploy    string `protobuf:"bytes,7,opt,name=deploy,proto3" json:"deploy,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{39}
}

func (x *Container) GetContainer() string {
	if x != nil {
		return x.Container
	}
	return ""
}

func (x *Container) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Container) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *Container) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Container) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *Container) GetDeploy() string {
	if x != nil {
		return x.Deploy
	}
	return ""
}

type Containerslist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Containers []*Container `protobuf:"bytes,1,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (x *Containerslist) Reset() {
	*x = Containerslist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Containerslist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Containerslist) ProtoMessage() {}

func (x *Containerslist) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Containerslist.ProtoReflect.Descriptor instead.
func (*Containerslist) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{40}
}

func (x *Containerslist) GetContainers() []*Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

type Sshcmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sshcmd string `protobuf:"bytes,1,opt,name=sshcmd,proto3" json:"sshcmd,omitempty"`
}

func (x *Sshcmd) Reset() {
	*x = Sshcmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sshcmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sshcmd) ProtoMessage() {}

func (x *Sshcmd) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sshcmd.ProtoReflect.Descriptor instead.
func (*Sshcmd) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{41}
}

func (x *Sshcmd) GetSshcmd() string {
	if x != nil {
		return x.Sshcmd
	}
	return ""
}

type Cmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmd string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (x *Cmd) Reset() {
	*x = Cmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cmd) ProtoMessage() {}

func (x *Cmd) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cmd.ProtoReflect.Descriptor instead.
func (*Cmd) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{42}
}

func (x *Cmd) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

type Scpdetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Source      string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Destination string `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	User        string `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Recursive   bool   `protobuf:"varint,5,opt,name=recursive,proto3" json:"recursive,omitempty"`
	Download    bool   `protobuf:"varint,6,opt,name=download,proto3" json:"download,omitempty"`
}

func (x *Scpdetails) Reset() {
	*x = Scpdetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scpdetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scpdetails) ProtoMessage() {}

func (x *Scpdetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scpdetails.ProtoReflect.Descriptor instead.
func (*Scpdetails) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{43}
}

func (x *Scpdetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scpdetails) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Scpdetails) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Scpdetails) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Scpdetails) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *Scpdetails) GetDownload() bool {
	if x != nil {
		return x.Download
	}
	return false
}

type Vmfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin  string `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Vmfile) Reset() {
	*x = Vmfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vmfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vmfile) ProtoMessage() {}

func (x *Vmfile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vmfile.ProtoReflect.Descriptor instead.
func (*Vmfile) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{44}
}

func (x *Vmfile) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Vmfile) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type Vmprofile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Profile       string    `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	Image         string    `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Customprofile string    `protobuf:"bytes,4,opt,name=customprofile,proto3" json:"customprofile,omitempty"`
	Overrides     string    `protobuf:"bytes,5,opt,name=overrides,proto3" json:"overrides,omitempty"`
	Wait          bool      `protobuf:"varint,6,opt,name=wait,proto3" json:"wait,omitempty"`
	Vmfiles       []*Vmfile `protobuf:"bytes,7,rep,name=vmfiles,proto3" json:"vmfiles,omitempty"`
	Ignitionfile  string    `protobuf:"bytes,8,opt,name=ignitionfile,proto3" json:"ignitionfile,omitempty"`
}

func (x *Vmprofile) Reset() {
	*x = Vmprofile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kcli_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vmprofile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vmprofile) ProtoMessage() {}

func (x *Vmprofile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kcli_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vmprofile.ProtoReflect.Descriptor instead.
func (*Vmprofile) Descriptor() ([]byte, []int) {
	return file_proto_kcli_proto_rawDescGZIP(), []int{45}
}

func (x *Vmprofile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vmprofile) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *Vmprofile) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Vmprofile) GetCustomprofile() string {
	if x != nil {
		return x.Customprofile
	}
	return ""
}

func (x *Vmprofile) GetOverrides() string {
	if x != nil {
		return x.Overrides
	}
	return ""
}

func (x *Vmprofile) GetWait() bool {
	if x != nil {
		return x.Wait
	}
	return false
}

func (x *Vmprofile) GetVmfiles() []*Vmfile {
	if x != nil {
		return x.Vmfiles
	}
	return nil
}

func (x *Vmprofile) GetIgnitionfile() string {
	if x != nil {
		return x.Ignitionfile
	}
	return ""
}

var File_proto_kcli_proto protoreflect.FileDescriptor

var file_proto_kcli_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x44, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xc0, 0x05, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x67,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6d, 0x75, 0x6c, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x64, 0x69, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x63, 0x64, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x30, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x02, 0x76, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x01, 0x58, 0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x01,
	0x59, 0x12, 0x0c, 0x0a, 0x01, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x44, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d,
	0x64, 0x22, 0x40, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x76,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xba, 0x05, 0x0a, 0x06, 0x76, 0x6d, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x70, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x70, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c, 0x0a,
	0x04, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6e, 0x65,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x64,
	0x69, 0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x64, 0x69, 0x73,
	0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x27, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x75, 0x62, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x75, 0x62, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x75, 0x62, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x7a, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x61, 0x7a, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x23, 0x0a, 0x06, 0x76, 0x6d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x03, 0x76, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x76, 0x6d, 0x69,
	0x6e, 0x66, 0x6f, 0x52, 0x03, 0x76, 0x6d, 0x73, 0x22, 0x66, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x76, 0x6d, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x76, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x6d,
	0x22, 0x81, 0x02, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x69, 0x73,
	0x6b, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x68, 0x6f, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x1e, 0x0a, 0x08, 0x69, 0x73,
	0x6f, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x6f, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x6f, 0x73, 0x22, 0x1d, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x24, 0x0a, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x42, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x28, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x22, 0x2c, 0x0a,
	0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x6d, 0x73, 0x22, 0x28, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x6e, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x05,
	0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x39, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x34, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x42, 0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x22, 0x28, 0x0a, 0x09, 0x70, 0x6f,
	0x6f, 0x6c, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x68, 0x63, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x68, 0x63, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x34, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x5e, 0x0a, 0x06,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x61, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x61, 0x7a, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x30, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x22, 0x40,
	0x0a, 0x04, 0x6b, 0x75, 0x62, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x75, 0x62, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x75, 0x62, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x6d, 0x73,
	0x22, 0x28, 0x0a, 0x09, 0x6b, 0x75, 0x62, 0x65, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x05, 0x6b, 0x75, 0x62, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x52, 0x05, 0x6b, 0x75, 0x62, 0x65, 0x73, 0x22, 0x6e, 0x0a, 0x02, 0x6c, 0x62,
	0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6c, 0x62,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x20, 0x0a, 0x07, 0x6c, 0x62,
	0x73, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x03, 0x2e, 0x6c, 0x62, 0x52, 0x03, 0x6c, 0x62, 0x73, 0x22, 0x52, 0x0a, 0x06,
	0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x63, 0x70, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x63, 0x70, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x22, 0x30, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x76, 0x6f,
	0x72, 0x73, 0x22, 0x2c, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0x28, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x65, 0x70, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x76, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x76, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0x34, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x22, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x22, 0x3c,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x20, 0x0a, 0x06,
	0x73, 0x73, 0x68, 0x63, 0x6d, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x73, 0x68, 0x63, 0x6d, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x73, 0x68, 0x63, 0x6d, 0x64, 0x22, 0x17,
	0x0a, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x0a, 0x73, 0x63, 0x70, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x3a, 0x0a, 0x06, 0x76, 0x6d, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xee,
	0x01, 0x0a, 0x09, 0x76, 0x6d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x77, 0x61, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x76, 0x6d, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x76, 0x6d, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x07, 0x76, 0x6d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x6c, 0x65, 0x32,
	0xa0, 0x05, 0x0a, 0x04, 0x4b, 0x63, 0x6c, 0x69, 0x12, 0x16, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x12, 0x03, 0x2e, 0x76, 0x6d, 0x1a, 0x04, 0x2e, 0x63, 0x6d, 0x64, 0x22, 0x00,
	0x12, 0x16, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x03, 0x2e, 0x76, 0x6d, 0x1a, 0x07, 0x2e,
	0x76, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x1a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x12, 0x07, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x07, 0x2e, 0x76, 0x6d, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x73, 0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x64, 0x69, 0x73,
	0x6b, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0c, 0x2e, 0x66, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x20, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x73, 0x6f, 0x73, 0x12, 0x06, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x69, 0x73, 0x6f, 0x73, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c,
	0x2e, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x19,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x03, 0x2e, 0x76, 0x6d, 0x1a, 0x07,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1d, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x03, 0x2e, 0x76, 0x6d,
	0x1a, 0x04, 0x2e, 0x63, 0x6d, 0x64, 0x22, 0x00, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x73, 0x68, 0x12,
	0x03, 0x2e, 0x76, 0x6d, 0x1a, 0x07, 0x2e, 0x73, 0x73, 0x68, 0x63, 0x6d, 0x64, 0x22, 0x00, 0x12,
	0x1d, 0x0a, 0x03, 0x73, 0x63, 0x70, 0x12, 0x0b, 0x2e, 0x73, 0x63, 0x70, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x1a, 0x07, 0x2e, 0x73, 0x73, 0x68, 0x63, 0x6d, 0x64, 0x22, 0x00, 0x12, 0x17,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x03, 0x2e, 0x76, 0x6d, 0x1a, 0x07, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x16, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12,
	0x03, 0x2e, 0x76, 0x6d, 0x1a, 0x07, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x18, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x03, 0x2e, 0x76, 0x6d, 0x1a, 0x07,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1c, 0x0a, 0x0a, 0x67, 0x65, 0x74,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x76, 0x6d, 0x12, 0x07, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x1a, 0x03, 0x2e, 0x76, 0x6d, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x06, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a,
	0x07, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x08, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x07, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c,
	0x12, 0x05, 0x2e, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x07, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x32, 0xc4, 0x08, 0x0a, 0x07, 0x4b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x6d, 0x12, 0x0a, 0x2e, 0x76, 0x6d,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x07, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x1f, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x07, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x08, 0x2e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x07, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x07,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x07, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x1a, 0x07, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x07, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x6c, 0x62, 0x12, 0x03, 0x2e, 0x6c, 0x62, 0x1a, 0x07, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6b,
	0x75, 0x62, 0x65, 0x12, 0x05, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x1a, 0x07, 0x2e, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x12, 0x05, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x1a, 0x07, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x1a, 0x07, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x05, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x1a, 0x07, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2c,
	0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x15,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0b, 0x2e,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0a,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x0a,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x73, 0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x62, 0x73, 0x12, 0x06, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x08, 0x2e, 0x6c, 0x62, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x06,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x2a,
	0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12,
	0x08, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x06, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0a, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x2a,
	0x0a, 0x11, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a,
	0x07, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x0a, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x07, 0x2e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x0a, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x1a, 0x07, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x22, 0x0a,
	0x0e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x12,
	0x05, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x1a, 0x07, 0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x24, 0x0a, 0x10, 0x6e, 0x6f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x05, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x1a, 0x07, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x05, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x1a, 0x07, 0x2e, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x12, 0x05, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x1a, 0x07, 0x2e, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x07, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x07,
	0x2e, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_kcli_proto_rawDescOnce sync.Once
	file_proto_kcli_proto_rawDescData = file_proto_kcli_proto_rawDesc
)

func file_proto_kcli_proto_rawDescGZIP() []byte {
	file_proto_kcli_proto_rawDescOnce.Do(func() {
		file_proto_kcli_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_kcli_proto_rawDescData)
	})
	return file_proto_kcli_proto_rawDescData
}

var file_proto_kcli_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_proto_kcli_proto_goTypes = []interface{}{
	(*Empty)(nil),          // 0: empty
	(*Version)(nil),        // 1: version
	(*Client)(nil),         // 2: client
	(*Clientslist)(nil),    // 3: clientslist
	(*Vm)(nil),             // 4: vm
	(*Snapshot)(nil),       // 5: snapshot
	(*Netinfo)(nil),        // 6: netinfo
	(*Diskinfo)(nil),       // 7: diskinfo
	(*Vminfo)(nil),         // 8: vminfo
	(*Vmlist)(nil),         // 9: vmlist
	(*Result)(nil),         // 10: result
	(*Profile)(nil),        // 11: profile
	(*Profileslist)(nil),   // 12: profileslist
	(*Isoslist)(nil),       // 13: isoslist
	(*Image)(nil),          // 14: image
	(*Imageslist)(nil),     // 15: imageslist
	(*Disk)(nil),           // 16: disk
	(*Diskslist)(nil),      // 17: diskslist
	(*Plan)(nil),           // 18: plan
	(*Planslist)(nil),      // 19: planslist
	(*Keyword)(nil),        // 20: keyword
	(*Keywordslist)(nil),   // 21: keywordslist
	(*Pool)(nil),           // 22: pool
	(*Poolslist)(nil),      // 23: poolslist
	(*Network)(nil),        // 24: network
	(*Networkslist)(nil),   // 25: networkslist
	(*Subnet)(nil),         // 26: subnet
	(*Subnetslist)(nil),    // 27: subnetslist
	(*Kube)(nil),           // 28: kube
	(*Kubeslist)(nil),      // 29: kubeslist
	(*Lb)(nil),             // 30: lb
	(*Lbslist)(nil),        // 31: lbslist
	(*Flavor)(nil),         // 32: flavor
	(*Flavorslist)(nil),    // 33: flavorslist
	(*Repo)(nil),           // 34: repo
	(*Reposlist)(nil),      // 35: reposlist
	(*Product)(nil),        // 36: product
	(*Productslist)(nil),   // 37: productslist
	(*Config)(nil),         // 38: config
	(*Container)(nil),      // 39: container
	(*Containerslist)(nil), // 40: containerslist
	(*Sshcmd)(nil),         // 41: sshcmd
	(*Cmd)(nil),            // 42: cmd
	(*Scpdetails)(nil),     // 43: scpdetails
	(*Vmfile)(nil),         // 44: vmfile
	(*Vmprofile)(nil),      // 45: vmprofile
}
var file_proto_kcli_proto_depIdxs = []int32{
	2,  // 0: clientslist.clients:type_name -> client
	6,  // 1: vminfo.nets:type_name -> netinfo
	7,  // 2: vminfo.disks:type_name -> diskinfo
	5,  // 3: vminfo.snapshots:type_name -> snapshot
	8,  // 4: vmlist.vms:type_name -> vminfo
	11, // 5: profileslist.profiles:type_name -> profile
	16, // 6: diskslist.disks:type_name -> disk
	18, // 7: planslist.plans:type_name -> plan
	20, // 8: keywordslist.keywords:type_name -> keyword
	22, // 9: poolslist.pools:type_name -> pool
	24, // 10: networkslist.networks:type_name -> network
	26, // 11: subnetslist.subnets:type_name -> subnet
	28, // 12: kubeslist.kubes:type_name -> kube
	30, // 13: lbslist.lbs:type_name -> lb
	32, // 14: flavorslist.flavors:type_name -> flavor
	34, // 15: reposlist.repos:type_name -> repo
	36, // 16: productslist.products:type_name -> product
	39, // 17: containerslist.containers:type_name -> container
	44, // 18: vmprofile.vmfiles:type_name -> vmfile
	4,  // 19: Kcli.console:input_type -> vm
	4,  // 20: Kcli.info:input_type -> vm
	2,  // 21: Kcli.list:input_type -> client
	0,  // 22: Kcli.list_disks:input_type -> empty
	0,  // 23: Kcli.list_flavors:input_type -> empty
	0,  // 24: Kcli.list_images:input_type -> empty
	0,  // 25: Kcli.list_networks:input_type -> empty
	0,  // 26: Kcli.list_isos:input_type -> empty
	0,  // 27: Kcli.list_pools:input_type -> empty
	0,  // 28: Kcli.list_subnets:input_type -> empty
	4,  // 29: Kcli.restart:input_type -> vm
	4,  // 30: Kcli.serial_console:input_type -> vm
	4,  // 31: Kcli.ssh:input_type -> vm
	43, // 32: Kcli.scp:input_type -> scpdetails
	4,  // 33: Kcli.start:input_type -> vm
	4,  // 34: Kcli.stop:input_type -> vm
	4,  // 35: Kcli.delete:input_type -> vm
	2,  // 36: Kcli.get_lastvm:input_type -> client
	14, // 37: Kcli.delete_image:input_type -> image
	24, // 38: Kcli.delete_network:input_type -> network
	22, // 39: Kcli.delete_pool:input_type -> pool
	45, // 40: Kconfig.create_vm:input_type -> vmprofile
	0,  // 41: Kconfig.get_config:input_type -> empty
	0,  // 42: Kconfig.get_version:input_type -> empty
	2,  // 43: Kconfig.create_host:input_type -> client
	2,  // 44: Kconfig.delete_host:input_type -> client
	39, // 45: Kconfig.delete_container:input_type -> container
	30, // 46: Kconfig.delete_lb:input_type -> lb
	28, // 47: Kconfig.delete_kube:input_type -> kube
	18, // 48: Kconfig.delete_plan:input_type -> plan
	11, // 49: Kconfig.delete_profile:input_type -> profile
	34, // 50: Kconfig.delete_repo:input_type -> repo
	0,  // 51: Kconfig.list_containers:input_type -> empty
	0,  // 52: Kconfig.list_container_images:input_type -> empty
	0,  // 53: Kconfig.list_hosts:input_type -> empty
	0,  // 54: Kconfig.list_keywords:input_type -> empty
	0,  // 55: Kconfig.list_kubes:input_type -> empty
	0,  // 56: Kconfig.list_lbs:input_type -> empty
	0,  // 57: Kconfig.list_plans:input_type -> empty
	0,  // 58: Kconfig.list_profiles:input_type -> empty
	36, // 59: Kconfig.list_products:input_type -> product
	0,  // 60: Kconfig.list_repos:input_type -> empty
	39, // 61: Kconfig.restart_container:input_type -> container
	39, // 62: Kconfig.start_container:input_type -> container
	39, // 63: Kconfig.stop_container:input_type -> container
	18, // 64: Kconfig.autostart_plan:input_type -> plan
	18, // 65: Kconfig.noautostart_plan:input_type -> plan
	18, // 66: Kconfig.start_plan:input_type -> plan
	18, // 67: Kconfig.stop_plan:input_type -> plan
	2,  // 68: Kconfig.switch_host:input_type -> client
	42, // 69: Kcli.console:output_type -> cmd
	8,  // 70: Kcli.info:output_type -> vminfo
	9,  // 71: Kcli.list:output_type -> vmlist
	17, // 72: Kcli.list_disks:output_type -> diskslist
	33, // 73: Kcli.list_flavors:output_type -> flavorslist
	15, // 74: Kcli.list_images:output_type -> imageslist
	25, // 75: Kcli.list_networks:output_type -> networkslist
	13, // 76: Kcli.list_isos:output_type -> isoslist
	23, // 77: Kcli.list_pools:output_type -> poolslist
	27, // 78: Kcli.list_subnets:output_type -> subnetslist
	10, // 79: Kcli.restart:output_type -> result
	42, // 80: Kcli.serial_console:output_type -> cmd
	41, // 81: Kcli.ssh:output_type -> sshcmd
	41, // 82: Kcli.scp:output_type -> sshcmd
	10, // 83: Kcli.start:output_type -> result
	10, // 84: Kcli.stop:output_type -> result
	10, // 85: Kcli.delete:output_type -> result
	4,  // 86: Kcli.get_lastvm:output_type -> vm
	10, // 87: Kcli.delete_image:output_type -> result
	10, // 88: Kcli.delete_network:output_type -> result
	10, // 89: Kcli.delete_pool:output_type -> result
	10, // 90: Kconfig.create_vm:output_type -> result
	38, // 91: Kconfig.get_config:output_type -> config
	1,  // 92: Kconfig.get_version:output_type -> version
	10, // 93: Kconfig.create_host:output_type -> result
	10, // 94: Kconfig.delete_host:output_type -> result
	10, // 95: Kconfig.delete_container:output_type -> result
	10, // 96: Kconfig.delete_lb:output_type -> result
	10, // 97: Kconfig.delete_kube:output_type -> result
	10, // 98: Kconfig.delete_plan:output_type -> result
	10, // 99: Kconfig.delete_profile:output_type -> result
	10, // 100: Kconfig.delete_repo:output_type -> result
	40, // 101: Kconfig.list_containers:output_type -> containerslist
	15, // 102: Kconfig.list_container_images:output_type -> imageslist
	3,  // 103: Kconfig.list_hosts:output_type -> clientslist
	21, // 104: Kconfig.list_keywords:output_type -> keywordslist
	29, // 105: Kconfig.list_kubes:output_type -> kubeslist
	31, // 106: Kconfig.list_lbs:output_type -> lbslist
	19, // 107: Kconfig.list_plans:output_type -> planslist
	12, // 108: Kconfig.list_profiles:output_type -> profileslist
	37, // 109: Kconfig.list_products:output_type -> productslist
	35, // 110: Kconfig.list_repos:output_type -> reposlist
	10, // 111: Kconfig.restart_container:output_type -> result
	10, // 112: Kconfig.start_container:output_type -> result
	10, // 113: Kconfig.stop_container:output_type -> result
	10, // 114: Kconfig.autostart_plan:output_type -> result
	10, // 115: Kconfig.noautostart_plan:output_type -> result
	10, // 116: Kconfig.start_plan:output_type -> result
	10, // 117: Kconfig.stop_plan:output_type -> result
	10, // 118: Kconfig.switch_host:output_type -> result
	69, // [69:119] is the sub-list for method output_type
	19, // [19:69] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_kcli_proto_init() }
func file_proto_kcli_proto_init() {
	if File_proto_kcli_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_kcli_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clientslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Netinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diskinfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vminfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vmlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profileslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Isoslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Imageslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Disk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diskslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Planslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keyword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keywordslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poolslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Networkslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnetslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kube); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kubeslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lbslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flavor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flavorslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reposlist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Productslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Containerslist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sshcmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scpdetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vmfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kcli_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vmprofile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_kcli_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_kcli_proto_goTypes,
		DependencyIndexes: file_proto_kcli_proto_depIdxs,
		MessageInfos:      file_proto_kcli_proto_msgTypes,
	}.Build()
	File_proto_kcli_proto = out.File
	file_proto_kcli_proto_rawDesc = nil
	file_proto_kcli_proto_goTypes = nil
	file_proto_kcli_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KcliClient is the client API for Kcli service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KcliClient interface {
	Console(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Cmd, error)
	Info(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Vminfo, error)
	List(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Vmlist, error)
	ListDisks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Diskslist, error)
	ListFlavors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Flavorslist, error)
	ListImages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Imageslist, error)
	ListNetworks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Networkslist, error)
	ListIsos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Isoslist, error)
	ListPools(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Poolslist, error)
	ListSubnets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Subnetslist, error)
	Restart(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Result, error)
	SerialConsole(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Cmd, error)
	Ssh(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Sshcmd, error)
	Scp(ctx context.Context, in *Scpdetails, opts ...grpc.CallOption) (*Sshcmd, error)
	Start(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Result, error)
	Stop(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Result, error)
	Delete(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Result, error)
	GetLastvm(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Vm, error)
	DeleteImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Result, error)
	DeleteNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Result, error)
	DeletePool(ctx context.Context, in *Pool, opts ...grpc.CallOption) (*Result, error)
}

type kcliClient struct {
	cc grpc.ClientConnInterface
}

func NewKcliClient(cc grpc.ClientConnInterface) KcliClient {
	return &kcliClient{cc}
}

func (c *kcliClient) Console(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Cmd, error) {
	out := new(Cmd)
	err := c.cc.Invoke(ctx, "/Kcli/console", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) Info(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Vminfo, error) {
	out := new(Vminfo)
	err := c.cc.Invoke(ctx, "/Kcli/info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) List(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Vmlist, error) {
	out := new(Vmlist)
	err := c.cc.Invoke(ctx, "/Kcli/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) ListDisks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Diskslist, error) {
	out := new(Diskslist)
	err := c.cc.Invoke(ctx, "/Kcli/list_disks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) ListFlavors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Flavorslist, error) {
	out := new(Flavorslist)
	err := c.cc.Invoke(ctx, "/Kcli/list_flavors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) ListImages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Imageslist, error) {
	out := new(Imageslist)
	err := c.cc.Invoke(ctx, "/Kcli/list_images", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) ListNetworks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Networkslist, error) {
	out := new(Networkslist)
	err := c.cc.Invoke(ctx, "/Kcli/list_networks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) ListIsos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Isoslist, error) {
	out := new(Isoslist)
	err := c.cc.Invoke(ctx, "/Kcli/list_isos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) ListPools(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Poolslist, error) {
	out := new(Poolslist)
	err := c.cc.Invoke(ctx, "/Kcli/list_pools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) ListSubnets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Subnetslist, error) {
	out := new(Subnetslist)
	err := c.cc.Invoke(ctx, "/Kcli/list_subnets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) Restart(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kcli/restart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) SerialConsole(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Cmd, error) {
	out := new(Cmd)
	err := c.cc.Invoke(ctx, "/Kcli/serial_console", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) Ssh(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Sshcmd, error) {
	out := new(Sshcmd)
	err := c.cc.Invoke(ctx, "/Kcli/ssh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) Scp(ctx context.Context, in *Scpdetails, opts ...grpc.CallOption) (*Sshcmd, error) {
	out := new(Sshcmd)
	err := c.cc.Invoke(ctx, "/Kcli/scp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) Start(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kcli/start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) Stop(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kcli/stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) Delete(ctx context.Context, in *Vm, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kcli/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) GetLastvm(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Vm, error) {
	out := new(Vm)
	err := c.cc.Invoke(ctx, "/Kcli/get_lastvm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) DeleteImage(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kcli/delete_image", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) DeleteNetwork(ctx context.Context, in *Network, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kcli/delete_network", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kcliClient) DeletePool(ctx context.Context, in *Pool, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kcli/delete_pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KcliServer is the server API for Kcli service.
type KcliServer interface {
	Console(context.Context, *Vm) (*Cmd, error)
	Info(context.Context, *Vm) (*Vminfo, error)
	List(context.Context, *Client) (*Vmlist, error)
	ListDisks(context.Context, *Empty) (*Diskslist, error)
	ListFlavors(context.Context, *Empty) (*Flavorslist, error)
	ListImages(context.Context, *Empty) (*Imageslist, error)
	ListNetworks(context.Context, *Empty) (*Networkslist, error)
	ListIsos(context.Context, *Empty) (*Isoslist, error)
	ListPools(context.Context, *Empty) (*Poolslist, error)
	ListSubnets(context.Context, *Empty) (*Subnetslist, error)
	Restart(context.Context, *Vm) (*Result, error)
	SerialConsole(context.Context, *Vm) (*Cmd, error)
	Ssh(context.Context, *Vm) (*Sshcmd, error)
	Scp(context.Context, *Scpdetails) (*Sshcmd, error)
	Start(context.Context, *Vm) (*Result, error)
	Stop(context.Context, *Vm) (*Result, error)
	Delete(context.Context, *Vm) (*Result, error)
	GetLastvm(context.Context, *Client) (*Vm, error)
	DeleteImage(context.Context, *Image) (*Result, error)
	DeleteNetwork(context.Context, *Network) (*Result, error)
	DeletePool(context.Context, *Pool) (*Result, error)
}

// UnimplementedKcliServer can be embedded to have forward compatible implementations.
type UnimplementedKcliServer struct {
}

func (*UnimplementedKcliServer) Console(context.Context, *Vm) (*Cmd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Console not implemented")
}
func (*UnimplementedKcliServer) Info(context.Context, *Vm) (*Vminfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedKcliServer) List(context.Context, *Client) (*Vmlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedKcliServer) ListDisks(context.Context, *Empty) (*Diskslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDisks not implemented")
}
func (*UnimplementedKcliServer) ListFlavors(context.Context, *Empty) (*Flavorslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlavors not implemented")
}
func (*UnimplementedKcliServer) ListImages(context.Context, *Empty) (*Imageslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImages not implemented")
}
func (*UnimplementedKcliServer) ListNetworks(context.Context, *Empty) (*Networkslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (*UnimplementedKcliServer) ListIsos(context.Context, *Empty) (*Isoslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIsos not implemented")
}
func (*UnimplementedKcliServer) ListPools(context.Context, *Empty) (*Poolslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPools not implemented")
}
func (*UnimplementedKcliServer) ListSubnets(context.Context, *Empty) (*Subnetslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubnets not implemented")
}
func (*UnimplementedKcliServer) Restart(context.Context, *Vm) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (*UnimplementedKcliServer) SerialConsole(context.Context, *Vm) (*Cmd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SerialConsole not implemented")
}
func (*UnimplementedKcliServer) Ssh(context.Context, *Vm) (*Sshcmd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ssh not implemented")
}
func (*UnimplementedKcliServer) Scp(context.Context, *Scpdetails) (*Sshcmd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scp not implemented")
}
func (*UnimplementedKcliServer) Start(context.Context, *Vm) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedKcliServer) Stop(context.Context, *Vm) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedKcliServer) Delete(context.Context, *Vm) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedKcliServer) GetLastvm(context.Context, *Client) (*Vm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastvm not implemented")
}
func (*UnimplementedKcliServer) DeleteImage(context.Context, *Image) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (*UnimplementedKcliServer) DeleteNetwork(context.Context, *Network) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (*UnimplementedKcliServer) DeletePool(context.Context, *Pool) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePool not implemented")
}

func RegisterKcliServer(s *grpc.Server, srv KcliServer) {
	s.RegisterService(&_Kcli_serviceDesc, srv)
}

func _Kcli_Console_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).Console(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/Console",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).Console(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).Info(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).List(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_ListDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).ListDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/ListDisks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).ListDisks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_ListFlavors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).ListFlavors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/ListFlavors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).ListFlavors(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_ListImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).ListImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/ListImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).ListImages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).ListNetworks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_ListIsos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).ListIsos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/ListIsos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).ListIsos(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_ListPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).ListPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/ListPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).ListPools(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_ListSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).ListSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/ListSubnets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).ListSubnets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).Restart(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_SerialConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).SerialConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/SerialConsole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).SerialConsole(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_Ssh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).Ssh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/Ssh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).Ssh(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_Scp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Scpdetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).Scp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/Scp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).Scp(ctx, req.(*Scpdetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).Start(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).Stop(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).Delete(ctx, req.(*Vm))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_GetLastvm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).GetLastvm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/GetLastvm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).GetLastvm(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).DeleteImage(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).DeleteNetwork(ctx, req.(*Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kcli_DeletePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KcliServer).DeletePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kcli/DeletePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KcliServer).DeletePool(ctx, req.(*Pool))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kcli_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Kcli",
	HandlerType: (*KcliServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "console",
			Handler:    _Kcli_Console_Handler,
		},
		{
			MethodName: "info",
			Handler:    _Kcli_Info_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Kcli_List_Handler,
		},
		{
			MethodName: "list_disks",
			Handler:    _Kcli_ListDisks_Handler,
		},
		{
			MethodName: "list_flavors",
			Handler:    _Kcli_ListFlavors_Handler,
		},
		{
			MethodName: "list_images",
			Handler:    _Kcli_ListImages_Handler,
		},
		{
			MethodName: "list_networks",
			Handler:    _Kcli_ListNetworks_Handler,
		},
		{
			MethodName: "list_isos",
			Handler:    _Kcli_ListIsos_Handler,
		},
		{
			MethodName: "list_pools",
			Handler:    _Kcli_ListPools_Handler,
		},
		{
			MethodName: "list_subnets",
			Handler:    _Kcli_ListSubnets_Handler,
		},
		{
			MethodName: "restart",
			Handler:    _Kcli_Restart_Handler,
		},
		{
			MethodName: "serial_console",
			Handler:    _Kcli_SerialConsole_Handler,
		},
		{
			MethodName: "ssh",
			Handler:    _Kcli_Ssh_Handler,
		},
		{
			MethodName: "scp",
			Handler:    _Kcli_Scp_Handler,
		},
		{
			MethodName: "start",
			Handler:    _Kcli_Start_Handler,
		},
		{
			MethodName: "stop",
			Handler:    _Kcli_Stop_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Kcli_Delete_Handler,
		},
		{
			MethodName: "get_lastvm",
			Handler:    _Kcli_GetLastvm_Handler,
		},
		{
			MethodName: "delete_image",
			Handler:    _Kcli_DeleteImage_Handler,
		},
		{
			MethodName: "delete_network",
			Handler:    _Kcli_DeleteNetwork_Handler,
		},
		{
			MethodName: "delete_pool",
			Handler:    _Kcli_DeletePool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kcli.proto",
}

// KconfigClient is the client API for Kconfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KconfigClient interface {
	CreateVm(ctx context.Context, in *Vmprofile, opts ...grpc.CallOption) (*Result, error)
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Config, error)
	GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error)
	CreateHost(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Result, error)
	DeleteHost(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Result, error)
	DeleteContainer(ctx context.Context, in *Container, opts ...grpc.CallOption) (*Result, error)
	DeleteLb(ctx context.Context, in *Lb, opts ...grpc.CallOption) (*Result, error)
	DeleteKube(ctx context.Context, in *Kube, opts ...grpc.CallOption) (*Result, error)
	DeletePlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Result, error)
	DeleteProfile(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Result, error)
	DeleteRepo(ctx context.Context, in *Repo, opts ...grpc.CallOption) (*Result, error)
	ListContainers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Containerslist, error)
	ListContainerImages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Imageslist, error)
	ListHosts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Clientslist, error)
	ListKeywords(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Keywordslist, error)
	ListKubes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Kubeslist, error)
	ListLbs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Lbslist, error)
	ListPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Planslist, error)
	ListProfiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Profileslist, error)
	ListProducts(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Productslist, error)
	ListRepos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Reposlist, error)
	RestartContainer(ctx context.Context, in *Container, opts ...grpc.CallOption) (*Result, error)
	StartContainer(ctx context.Context, in *Container, opts ...grpc.CallOption) (*Result, error)
	StopContainer(ctx context.Context, in *Container, opts ...grpc.CallOption) (*Result, error)
	AutostartPlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Result, error)
	NoautostartPlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Result, error)
	StartPlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Result, error)
	StopPlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Result, error)
	SwitchHost(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Result, error)
}

type kconfigClient struct {
	cc grpc.ClientConnInterface
}

func NewKconfigClient(cc grpc.ClientConnInterface) KconfigClient {
	return &kconfigClient{cc}
}

func (c *kconfigClient) CreateVm(ctx context.Context, in *Vmprofile, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/create_vm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/Kconfig/get_config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/Kconfig/get_version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) CreateHost(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/create_host", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) DeleteHost(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/delete_host", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) DeleteContainer(ctx context.Context, in *Container, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/delete_container", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) DeleteLb(ctx context.Context, in *Lb, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/delete_lb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) DeleteKube(ctx context.Context, in *Kube, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/delete_kube", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) DeletePlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/delete_plan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) DeleteProfile(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/delete_profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) DeleteRepo(ctx context.Context, in *Repo, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/delete_repo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) ListContainers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Containerslist, error) {
	out := new(Containerslist)
	err := c.cc.Invoke(ctx, "/Kconfig/list_containers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) ListContainerImages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Imageslist, error) {
	out := new(Imageslist)
	err := c.cc.Invoke(ctx, "/Kconfig/list_container_images", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) ListHosts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Clientslist, error) {
	out := new(Clientslist)
	err := c.cc.Invoke(ctx, "/Kconfig/list_hosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) ListKeywords(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Keywordslist, error) {
	out := new(Keywordslist)
	err := c.cc.Invoke(ctx, "/Kconfig/list_keywords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) ListKubes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Kubeslist, error) {
	out := new(Kubeslist)
	err := c.cc.Invoke(ctx, "/Kconfig/list_kubes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) ListLbs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Lbslist, error) {
	out := new(Lbslist)
	err := c.cc.Invoke(ctx, "/Kconfig/list_lbs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) ListPlans(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Planslist, error) {
	out := new(Planslist)
	err := c.cc.Invoke(ctx, "/Kconfig/list_plans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) ListProfiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Profileslist, error) {
	out := new(Profileslist)
	err := c.cc.Invoke(ctx, "/Kconfig/list_profiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) ListProducts(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Productslist, error) {
	out := new(Productslist)
	err := c.cc.Invoke(ctx, "/Kconfig/list_products", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) ListRepos(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Reposlist, error) {
	out := new(Reposlist)
	err := c.cc.Invoke(ctx, "/Kconfig/list_repos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) RestartContainer(ctx context.Context, in *Container, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/restart_container", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) StartContainer(ctx context.Context, in *Container, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/start_container", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) StopContainer(ctx context.Context, in *Container, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/stop_container", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) AutostartPlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/autostart_plan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) NoautostartPlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/noautostart_plan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) StartPlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/start_plan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) StopPlan(ctx context.Context, in *Plan, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/stop_plan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kconfigClient) SwitchHost(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/Kconfig/switch_host", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KconfigServer is the server API for Kconfig service.
type KconfigServer interface {
	CreateVm(context.Context, *Vmprofile) (*Result, error)
	GetConfig(context.Context, *Empty) (*Config, error)
	GetVersion(context.Context, *Empty) (*Version, error)
	CreateHost(context.Context, *Client) (*Result, error)
	DeleteHost(context.Context, *Client) (*Result, error)
	DeleteContainer(context.Context, *Container) (*Result, error)
	DeleteLb(context.Context, *Lb) (*Result, error)
	DeleteKube(context.Context, *Kube) (*Result, error)
	DeletePlan(context.Context, *Plan) (*Result, error)
	DeleteProfile(context.Context, *Profile) (*Result, error)
	DeleteRepo(context.Context, *Repo) (*Result, error)
	ListContainers(context.Context, *Empty) (*Containerslist, error)
	ListContainerImages(context.Context, *Empty) (*Imageslist, error)
	ListHosts(context.Context, *Empty) (*Clientslist, error)
	ListKeywords(context.Context, *Empty) (*Keywordslist, error)
	ListKubes(context.Context, *Empty) (*Kubeslist, error)
	ListLbs(context.Context, *Empty) (*Lbslist, error)
	ListPlans(context.Context, *Empty) (*Planslist, error)
	ListProfiles(context.Context, *Empty) (*Profileslist, error)
	ListProducts(context.Context, *Product) (*Productslist, error)
	ListRepos(context.Context, *Empty) (*Reposlist, error)
	RestartContainer(context.Context, *Container) (*Result, error)
	StartContainer(context.Context, *Container) (*Result, error)
	StopContainer(context.Context, *Container) (*Result, error)
	AutostartPlan(context.Context, *Plan) (*Result, error)
	NoautostartPlan(context.Context, *Plan) (*Result, error)
	StartPlan(context.Context, *Plan) (*Result, error)
	StopPlan(context.Context, *Plan) (*Result, error)
	SwitchHost(context.Context, *Client) (*Result, error)
}

// UnimplementedKconfigServer can be embedded to have forward compatible implementations.
type UnimplementedKconfigServer struct {
}

func (*UnimplementedKconfigServer) CreateVm(context.Context, *Vmprofile) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVm not implemented")
}
func (*UnimplementedKconfigServer) GetConfig(context.Context, *Empty) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedKconfigServer) GetVersion(context.Context, *Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedKconfigServer) CreateHost(context.Context, *Client) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHost not implemented")
}
func (*UnimplementedKconfigServer) DeleteHost(context.Context, *Client) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHost not implemented")
}
func (*UnimplementedKconfigServer) DeleteContainer(context.Context, *Container) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContainer not implemented")
}
func (*UnimplementedKconfigServer) DeleteLb(context.Context, *Lb) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLb not implemented")
}
func (*UnimplementedKconfigServer) DeleteKube(context.Context, *Kube) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKube not implemented")
}
func (*UnimplementedKconfigServer) DeletePlan(context.Context, *Plan) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlan not implemented")
}
func (*UnimplementedKconfigServer) DeleteProfile(context.Context, *Profile) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (*UnimplementedKconfigServer) DeleteRepo(context.Context, *Repo) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepo not implemented")
}
func (*UnimplementedKconfigServer) ListContainers(context.Context, *Empty) (*Containerslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainers not implemented")
}
func (*UnimplementedKconfigServer) ListContainerImages(context.Context, *Empty) (*Imageslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainerImages not implemented")
}
func (*UnimplementedKconfigServer) ListHosts(context.Context, *Empty) (*Clientslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHosts not implemented")
}
func (*UnimplementedKconfigServer) ListKeywords(context.Context, *Empty) (*Keywordslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKeywords not implemented")
}
func (*UnimplementedKconfigServer) ListKubes(context.Context, *Empty) (*Kubeslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKubes not implemented")
}
func (*UnimplementedKconfigServer) ListLbs(context.Context, *Empty) (*Lbslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLbs not implemented")
}
func (*UnimplementedKconfigServer) ListPlans(context.Context, *Empty) (*Planslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (*UnimplementedKconfigServer) ListProfiles(context.Context, *Empty) (*Profileslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfiles not implemented")
}
func (*UnimplementedKconfigServer) ListProducts(context.Context, *Product) (*Productslist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (*UnimplementedKconfigServer) ListRepos(context.Context, *Empty) (*Reposlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepos not implemented")
}
func (*UnimplementedKconfigServer) RestartContainer(context.Context, *Container) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartContainer not implemented")
}
func (*UnimplementedKconfigServer) StartContainer(context.Context, *Container) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (*UnimplementedKconfigServer) StopContainer(context.Context, *Container) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (*UnimplementedKconfigServer) AutostartPlan(context.Context, *Plan) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutostartPlan not implemented")
}
func (*UnimplementedKconfigServer) NoautostartPlan(context.Context, *Plan) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoautostartPlan not implemented")
}
func (*UnimplementedKconfigServer) StartPlan(context.Context, *Plan) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPlan not implemented")
}
func (*UnimplementedKconfigServer) StopPlan(context.Context, *Plan) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPlan not implemented")
}
func (*UnimplementedKconfigServer) SwitchHost(context.Context, *Client) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchHost not implemented")
}

func RegisterKconfigServer(s *grpc.Server, srv KconfigServer) {
	s.RegisterService(&_Kconfig_serviceDesc, srv)
}

func _Kconfig_CreateVm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vmprofile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).CreateVm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/CreateVm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).CreateVm(ctx, req.(*Vmprofile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).GetVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_CreateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).CreateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/CreateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).CreateHost(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_DeleteHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).DeleteHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/DeleteHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).DeleteHost(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_DeleteContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Container)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).DeleteContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/DeleteContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).DeleteContainer(ctx, req.(*Container))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_DeleteLb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).DeleteLb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/DeleteLb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).DeleteLb(ctx, req.(*Lb))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_DeleteKube_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Kube)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).DeleteKube(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/DeleteKube",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).DeleteKube(ctx, req.(*Kube))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_DeletePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).DeletePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/DeletePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).DeletePlan(ctx, req.(*Plan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/DeleteProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).DeleteProfile(ctx, req.(*Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Repo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/DeleteRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).DeleteRepo(ctx, req.(*Repo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_ListContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).ListContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/ListContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).ListContainers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_ListContainerImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).ListContainerImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/ListContainerImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).ListContainerImages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_ListHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).ListHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/ListHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).ListHosts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_ListKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).ListKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/ListKeywords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).ListKeywords(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_ListKubes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).ListKubes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/ListKubes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).ListKubes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_ListLbs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).ListLbs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/ListLbs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).ListLbs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/ListPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).ListPlans(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_ListProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).ListProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/ListProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).ListProfiles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).ListProducts(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_ListRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).ListRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/ListRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).ListRepos(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_RestartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Container)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).RestartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/RestartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).RestartContainer(ctx, req.(*Container))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Container)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/StartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).StartContainer(ctx, req.(*Container))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Container)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/StopContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).StopContainer(ctx, req.(*Container))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_AutostartPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).AutostartPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/AutostartPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).AutostartPlan(ctx, req.(*Plan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_NoautostartPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).NoautostartPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/NoautostartPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).NoautostartPlan(ctx, req.(*Plan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_StartPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).StartPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/StartPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).StartPlan(ctx, req.(*Plan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_StopPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).StopPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/StopPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).StopPlan(ctx, req.(*Plan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kconfig_SwitchHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KconfigServer).SwitchHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Kconfig/SwitchHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KconfigServer).SwitchHost(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kconfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Kconfig",
	HandlerType: (*KconfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_vm",
			Handler:    _Kconfig_CreateVm_Handler,
		},
		{
			MethodName: "get_config",
			Handler:    _Kconfig_GetConfig_Handler,
		},
		{
			MethodName: "get_version",
			Handler:    _Kconfig_GetVersion_Handler,
		},
		{
			MethodName: "create_host",
			Handler:    _Kconfig_CreateHost_Handler,
		},
		{
			MethodName: "delete_host",
			Handler:    _Kconfig_DeleteHost_Handler,
		},
		{
			MethodName: "delete_container",
			Handler:    _Kconfig_DeleteContainer_Handler,
		},
		{
			MethodName: "delete_lb",
			Handler:    _Kconfig_DeleteLb_Handler,
		},
		{
			MethodName: "delete_kube",
			Handler:    _Kconfig_DeleteKube_Handler,
		},
		{
			MethodName: "delete_plan",
			Handler:    _Kconfig_DeletePlan_Handler,
		},
		{
			MethodName: "delete_profile",
			Handler:    _Kconfig_DeleteProfile_Handler,
		},
		{
			MethodName: "delete_repo",
			Handler:    _Kconfig_DeleteRepo_Handler,
		},
		{
			MethodName: "list_containers",
			Handler:    _Kconfig_ListContainers_Handler,
		},
		{
			MethodName: "list_container_images",
			Handler:    _Kconfig_ListContainerImages_Handler,
		},
		{
			MethodName: "list_hosts",
			Handler:    _Kconfig_ListHosts_Handler,
		},
		{
			MethodName: "list_keywords",
			Handler:    _Kconfig_ListKeywords_Handler,
		},
		{
			MethodName: "list_kubes",
			Handler:    _Kconfig_ListKubes_Handler,
		},
		{
			MethodName: "list_lbs",
			Handler:    _Kconfig_ListLbs_Handler,
		},
		{
			MethodName: "list_plans",
			Handler:    _Kconfig_ListPlans_Handler,
		},
		{
			MethodName: "list_profiles",
			Handler:    _Kconfig_ListProfiles_Handler,
		},
		{
			MethodName: "list_products",
			Handler:    _Kconfig_ListProducts_Handler,
		},
		{
			MethodName: "list_repos",
			Handler:    _Kconfig_ListRepos_Handler,
		},
		{
			MethodName: "restart_container",
			Handler:    _Kconfig_RestartContainer_Handler,
		},
		{
			MethodName: "start_container",
			Handler:    _Kconfig_StartContainer_Handler,
		},
		{
			MethodName: "stop_container",
			Handler:    _Kconfig_StopContainer_Handler,
		},
		{
			MethodName: "autostart_plan",
			Handler:    _Kconfig_AutostartPlan_Handler,
		},
		{
			MethodName: "noautostart_plan",
			Handler:    _Kconfig_NoautostartPlan_Handler,
		},
		{
			MethodName: "start_plan",
			Handler:    _Kconfig_StartPlan_Handler,
		},
		{
			MethodName: "stop_plan",
			Handler:    _Kconfig_StopPlan_Handler,
		},
		{
			MethodName: "switch_host",
			Handler:    _Kconfig_SwitchHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/kcli.proto",
}
